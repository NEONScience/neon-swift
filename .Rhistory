tidyr::unite(col = "uid", c(site, dp, levlTowr, var), sep = "_", remove = FALSE)
if(nrow(tempAirTop) > 0){
for(i in unique(tempAirTop$uid)){
data_testing = tempAirTop %>%
dplyr::filter(uid == i)
missing_dates = data.table::data.table(dates = dates_expected, found = dates_expected %not% data_testing$date) %>%
dplyr::filter(found == TRUE)
if(nrow(missing_dates) > 0){
# Values to add to new table
site_var     = data_testing$site[1]
dp_var       = data_testing$dp[1]
levlTowr_var = data_testing$levlTowr[1]
var_var      = data_testing$var[1]
qf_var       = 0
# Add 0's to missing data
for(j in missing_dates$dates){
missing_data = data.table::data.table(
uid = i,
site = site_var,
date = as.Date(j, origin = "1970-01-01"),
dp = dp_var,
levlTowr = levlTowr_var,
var = var_var,
qfFinlTotl = qf_var)
tempAirTop = data.table::rbindlist(l = list(tempAirTop, missing_data))
}
}
}
}
rm(pb, qfqm_all, qfqm_avail, data_testing, qfqm_out)
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "WREF", start_date = Sys.Date()-30, end_date = Sys.Date())
runApp()
shiny::runApp()
dfs = list("nada")
dfs = list()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS")
View(swft_hidden_data)
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct()
str(swft_hidden_data)
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, by = "1 day"))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day"))
ggplot(swft_hidden_data, aes(x = day))+
geom_bar()
runApp()
runApp()
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::mutate(`Total Time` = as.numeric(`Total Time`))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2)) %>%
dplyr::mutate(histoStack = cut(`Total Time`, breaks = 60))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2)) %>%
dplyr::mutate(histoStack = cut(`Total Time`, breaks = 6))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2)) %>%
dplyr::mutate(histoStack = cut(`Total Time`, breaks = "60 secs"))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
# dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2)) %>%
dplyr::mutate(histoStack = cut(`Total Time`, breaks = "60 secs"))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2)) %>%
dplyr::mutate(histoStack = cut(`Total Time`, breaks = 10))
View(swft_hidden_data)
ggplot(swft_hidden_data, aes(x = day, fill = `Total Time`))+
geom_bar()
ggplot(swft_hidden_data, aes(x = day, fill = "blue"))+
geom_bar()
ggplot(swft_hidden_data, aes(x = day, fill = `Total Time`))+
geom_bar()
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar()
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar() +
theme(legend.position = "none")
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar() +
labs(y = "Connections to Swift", x = "")
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
ggplot(swft_hidden_data, aes(x = `Total Time`, fill = day))+
geom_histogram() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
ggplot(swft_hidden_data, aes(x = `Total Time`, fill = day))+
geom_histogram(binwidth = 60) +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
2000/60
ggplot(swft_hidden_data, aes(x = `Total Time`/60, fill = day))+
geom_histogram(binwidth = 10) +
labs(y = "Count", x = "Duration of Connection (m)") +
theme(legend.position = "none")
runApp()
?capture.output
runApp()
test = qfqm_reporting(site = "WREF", start_date = Sys.Date()-14, end_date = Sys.Date())
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "WREF", start_date = Sys.Date()-14, end_date = Sys.Date())
unique_tower_levels = unique(qfqm_out$dp)
unique_tower_levels
test = qfqm_reporting(site = "DCFS", start_date = Sys.Date()-21, end_date = Sys.Date())
unique_tower_levels = unique(qfqm_out$dp)
unique_tower_levels
unique_tower_levels = unique(qfqm_out$levlTowr)
unique_tower_levels
unique_tower_levels = qfqm_out %>%  dplyr::filter(stringr::str_detect(string = levlTowr, pattern = "000_"))
unique_tower_levels = qfqm_out %>%  dplyr::filter(stringr::str_detect(string = levlTowr, pattern = "000_")) %>% unique(levlTowr)
unique_tower_levels = unique(unique_tower_levels$levlTowr)
unique_tower_levels = qfqm_out %>%  dplyr::filter(stringr::str_detect(string = levlTowr, pattern = "000_"))
unique_tower_levels = unique(unique_tower_levels$levlTowr)
unique_tower_levels
highest_level = max(unique_tower_levels)
highest_level
View(qfqm_out)
amrs_vars = qfqm_out %>%  dplyr::filter(dp == "amrs")
amrs = qfqm_out %>%  dplyr::filter(dp == "amrs")
amrs_vars = unique(amrs$var)
amrs_vars
amrs_metrics = unique(amrs$metric)
amrs_metrics
saveRDS(amrs_vars, "./data/lookup/qfqm/amrs_vars.RDS")
saveRDS(amrs_metrics, "./data/lookup/qfqm/amrs_metrics.RDS")
amrs_vars = readRDS("./data/lookup/qfqm/amrs_vars.RDS")
amrs_metrics = readRDS("./data/lookup/qfqm/amrs_metrics.RDS")
names(qfqm_out)
amrs_metrics
amrs = data.table::data.table()
for(i in amrs_vars){
amrs_new = data.table::data.table(
"site" = qfqm_out$site[1], "date" = qfqm_out$date[1], "dp" = "amrs", "levlTowr" = highest_level,
"metric" = amrs_metrics, "var" = i, "value" = 0, "qmQfFinl" = 0, "qfFinlTotl" = 0, "qmQfAlphFinl" = 0
)
data.table::rbindlist(l = list(amrs, amrs_new))
}
amrs = data.table::data.table()
for(i in amrs_vars){
amrs_new = data.table::data.table(
"site" = qfqm_out$site[1], "date" = qfqm_out$date[1], "dp" = "amrs", "levlTowr" = highest_level,
"metric" = amrs_metrics, "var" = i, "value" = 0, "qmQfFinl" = 0, "qfFinlTotl" = 0, "qmQfAlphFinl" = 0
)
amrs = data.table::rbindlist(l = list(amrs, amrs_new))
}
unique_tower_levels = qfqm_out %>%  dplyr::filter(stringr::str_detect(string = levlTowr, pattern = "000_"))
highest_level = max(unique_tower_levels$levlTowr)
highest_level
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "DCFS", start_date = Sys.Date()-21, end_date = Sys.Date())
View(amrs)
base::source("./R/qfqm_reporting.R")
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "WREF", start_date = Sys.Date()-21, end_date = Sys.Date())
View(test)
runApp()
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
View(amrs)
amrs = amrs %>%
tidyr::unite(col = "uid", c(site, dp, levlTowr, var), sep = "_", remove = FALSE)
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
names(amrs)
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
amrs = data.table::rbindlist(l = list(amrs, missing_data))
names(amrs)
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
amrs = data.table::rbindlist(l = list(amrs, missing_data))
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
View(test)
runApp()
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
# tempAirLvl
tempAirLvl = qfqm_out %>%
dplyr::filter(dp == "tempAirLvl") %>%
dplyr::filter(stringr::str_detect(string = levlTowr, pattern = "000_") == TRUE) %>%
dplyr::group_by(site, date, dp, levlTowr, var) %>%
dplyr::summarise(.groups = "drop",
qfFinlTotl = mean(qfFinlTotl, na.rm = TRUE)
) %>%
tidyr::unite(col = "uid", c(site, dp, levlTowr, var), sep = "_", remove = FALSE)
# Data for gap filling
unique_tower_levels = qfqm_out %>%  dplyr::filter(stringr::str_detect(string = levlTowr, pattern = "000_"))
highest_level = max(unique_tower_levels$levlTowr)
unique_tower_levels = unique(unique_tower_levels$levlTowr)
unique_tower_levels
highest_level
# Missing levels
missing_levels = data.table::data.table(dates = dates_expected, found = unique_tower_levels %not% tempAirLvl$levlTowr) %>%
dplyr::filter(found == TRUE)
View(missing_levels)
# Missing levels
missing_levels = data.table::data.table(dates = unique_tower_levels, found = unique_tower_levels %not% tempAirLvl$levlTowr) %>%
dplyr::filter(found == TRUE)
View(missing_levels)
# Missing levels
missing_levels = data.table::data.table(levels = unique_tower_levels, found = unique_tower_levels %not% tempAirLvl$levlTowr) %>%
dplyr::filter(found == TRUE)
View(missing_levels)
seq_along(missing_levels$levels)
View(tempAirLvl)
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
View(h2oTurb)
View(tempAirLvl)
View(test)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# library(ggdark, lib.loc = "./R/x86_64-redhat-linux-gnu-library/3.6/")
library(shinyWidgets)
install.packages("shinyWidgets")
install.packages("shinyWidgets")
shiny::runApp()
test = qfqm_reporting(site = "TREE", start_date = Sys.Date()-21, end_date = Sys.Date())
View(test)
test = qfqm_reporting(site = "UNDE", start_date = Sys.Date()-45, end_date = Sys.Date())
names(test)
runApp()
source('C:/1_GitHub/neon-swift/server/swiftQfQm.R')
shiny::runApp()
runApp()
shiny::runApp()
test = qfqm_reporting(site = "UNDE", start_date = Sys.Date()-45, end_date = Sys.Date())
unique(test$amrs$var)
amrs_vars <- readRDS("C:/1_GitHub/neon-swift/data/lookup/qfqm/amrs_vars.RDS")
amrs_vars
unique(test$co2Stor$var)
runApp()
runApp()
?shiny::debounce()
runApp()
runApp()
library(shiny)
library(plyr)
library(vctrs)
library(glue)
library(tidyselect)
library(dplyr)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(DT)
library(tidyr)
library(data.table)
# library(shinycssloaders)
library(shinycssloaders, lib.loc = "./R/x86_64-redhat-linux-gnu-library/3.6/")
runApp()
Sys.setenv("AWS_ACCESS_KEY_ID"     = "research-eddy-inquiry",
"AWS_S3_ENDPOINT"       = "neonscience.org",
"AWS_DEFAULT_REGION"    = "s3.data")
# fulcrum_data_raw = aws.s3::s3readRDS(object = "maintainance_app/all_data.RDS", bucket = "research-eddy-inquiry") %>%
fulcrum_data_raw = aws.s3::s3read_using(FUN = fst::read.fst, object = "maintainance_app/all_data.fst", bucket = "research-eddy-inquiry") %>%
# Remove all useless columns
dplyr::select(-technician_1, -technician_1_link, -technician_2, -technician_2_link,
-guy_tower_at_site, -cleaned_measurement_level_pars, -cleaned_measurement_level_irbiotemps, -cleaned_tower_top_rad_sensors)
fulcrum_data_raw = aws.s3::s3read_using(FUN = fst::read.fst,object = "maintenance_app/all_data.fst", bucket = "research-eddy-inquiry")
fulcrum_data_raw = aws.s3::s3read_using(FUN = fst::read.fst,object = "maintenance_app/all_data.fst", bucket = "research-eddy-inquiry") %>%
# Remove all useless columns
dplyr::select(-technician_1, -technician_1_link, -technician_2, -technician_2_link,
-guy_tower_at_site, -cleaned_measurement_level_pars, -cleaned_measurement_level_irbiotemps, -cleaned_tower_top_rad_sensors)
View(fulcrum_data_raw)
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::filter(day > Sys.Date() - 14) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
shiny::runApp()
runApp()
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::filter(day > Sys.Date() - 14) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
user_log <- readRDS("C:/1_GitHub/neon-swift/data/user_log/user_log.RDS")
View(user_log)
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = cut(Start, breaks = "1 day")) %>%
dplyr::filter(day > Sys.Date() - 14) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = as.Date(cut(Start, breaks = "1 day"), origin = "1970-01-01") %>%
dplyr::filter(day > Sys.Date() - 14) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
output$swft_hidden_plot_connections = plotly::renderPlotly({
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
})
output$swft_hidden_plot_durations = plotly::renderPlotly({
ggplot(swft_hidden_data %>%  dplyr::filter(`Total Time` < 60*60), aes(x = `Total Time`/60, fill = day))+
geom_histogram(binwidth = 1) +
labs(y = "Count", x = "Duration of Connection (m)", fill = "Date")
})
}
})
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = as.Date(cut(Start, breaks = "1 day"), origin = "1970-01-01")) %>%
dplyr::filter(day > Sys.Date() - 14) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
output$swft_hidden_plot_connections = plotly::renderPlotly({
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
})
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
ggplot(swft_hidden_data %>%  dplyr::filter(`Total Time` < 60*60), aes(x = `Total Time`/60, fill = day))+
geom_histogram(binwidth = 1) +
labs(y = "Count", x = "Duration of Connection (m)", fill = "Date")
runApp()
View(swft_hidden_data)
View(swft_hidden_data)
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = as.Date(cut(Start, breaks = "1 day"), origin = "1970-01-01")) %>%
dplyr::filter(day > Sys.Date() - 14) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
ggplot(swft_hidden_data, aes(x = day, fill = day))+
geom_bar() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
ggplot(swft_hidden_data, aes(x = day, fill = day, color = day))+
geom_bar() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
# Read/clean data
swft_hidden_data = base::readRDS(file = "./data/user_log/user_log.RDS") %>%
dplyr::distinct() %>%
dplyr::mutate(day = as.Date(cut(Start, breaks = "1 day"), origin = "1970-01-01")) %>%
dplyr::filter(day > Sys.Date() - 14) %>%
dplyr::mutate(`Total Time` = round(as.numeric(`Total Time`),2))
View(swft_hidden_data)
runApp()
str(swft_hidden_data)
ggplot(swft_hidden_data, aes(x = day, fill = as.factor(day)))+
geom_bar() +
labs(y = "Connections to Swift", x = "") +
theme(legend.position = "none")
ggplot(swft_hidden_data %>%  dplyr::filter(`Total Time` < 60*60), aes(x = `Total Time`/60, fill = as.factor(day))) +
geom_histogram(binwidth = 1) +
labs(y = "Count", x = "Duration of Connection (m)", fill = "Date")
runApp()
runApp()
runApp()
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "UNDE", start_date = Sys.Date()-17, end_date = Sys.Date()-6)
base::source("./R/qfqm_reporting.R")
test = qfqm_reporting(site = "UNDE", start_date = Sys.Date()-17, end_date = Sys.Date()-6)
View(qfqm_out)
test = qfqm_out %>%  dplyr::filter(date == "2021-04-30")
View(test)
test = qfqm_out %>%  dplyr::filter(date == "2021-04-30") %>%  dplyr::filter(metric %in% c("qmBeta", "qmAlph"))
View(test)
11.50395+11.49605
9+7.5+6.4
shiny::runApp()
runApp()
?menuSubItem
runApp()
runApp()
runApp()
?menuItem
runApp()
runApp()
runApp()
runApp()
runApp()
swft_ei_bucket = "research-eddy-inquiry"
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("/qfqm_flux_shiny/v20210223/YELL/"))
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("/qfqm_flux_shiny/v20210223/YELL"))
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/YELL"))
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/YELL/"))
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/YELL/"), max = Inf)
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/YELL/"), max = Inf) %>%
tidyr::separate(col = Key, remove = FALSE, into = c("folder", "version", "site", "file"), sep =  "/")
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/YELL/"), max = Inf) %>%
tidyr::separate(col = Key, remove = FALSE, into = c("folder", "version", "site", "file"), sep =  "/") %>%
tidyr::separate(col = file, sep = "_", into = c("year", "type", "stream", "id"))
aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/YELL/"), max = Inf) %>%
tidyr::separate(col = Key, remove = FALSE, into = c("folder", "version", "site", "file"), sep =  "/") %>%
tidyr::separate(col = file, sep = "_", into = c("year", "type", "stream", "id")) %>%
dplyr::filter(type == "plot")
runApp()
runApp()
runApp()
?element_text
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
R.version
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(dplyr)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(DT)
library(tidyr)
library(data.table)
library(fst)
library(shinycssloaders)
library(shinydashboard)
library(viridis)
library(stringr)
library(scales)
library(aws.signature)
library(lubridate)
library(dashboardthemes)
library(ggdark)
library(shinyWidgets)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
?install.packages()
libPaths()
.libPaths()
devtools::install_version(package = "aws.s3", version = "0.3.21", )
devtools::install_version(package = "aws.s3", version = "0.3.21", repos = "http://cran.us.r-project.org",  upgrade = "never")
devtools::install_version(package = "aws.s3", version = "0.3.21", upgrade = "never")
?install.packages()
install.packages("aws.signature", lib = "/srv/shiny-server/neon-swift/R/x86_64-redhat-linux-gnu-library/3.6/", repos = "https://cloud.r-project.org/")
install.packages("aws.signature", lib = "/srv/shiny-server/neon-swift/R/x86_64-redhat-linux-gnu-library/3.6/", repos = "https://cloud.r-project.org/")
install.packages("aws.s3", lib = "./neon-swift/R/x86_64-redhat-linux-gnu-library/3.6/", repos = "https://cloud.r-project.org/")
install.packages("aws.s3", lib = "./neon-swift/R/x86_64-redhat-linux-gnu-library/3.6/", repos = "https://cloud.r-project.org/")
install.packages("aws.s3", lib = "C:/1_GitHub/neon-swift/R/x86_64-redhat-linux-gnu-library/3.6/", repos = "https://cloud.r-project.org/")
install.packages("aws.s3", lib = "C:/1_GitHub/neon-swift/R/", repos = "https://cloud.r-project.org/")
shiny::runApp()
data_in = aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/STER/"))
swft_ei_bucket = "research-eddy-inquiry"
data_in = aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/STER/"))
runApp()
runApp()
runApp()
data_in = aws.s3::get_bucket_df(bucket = swft_ei_bucket, prefix = paste0("qfqm_flux_shiny/v20210223/STER/"))
data_in %>%
tidyr::separate(col = Key, remove = FALSE, into = c("folder", "version", "site", "file"), sep =  "/") %>%
tidyr::separate(col = file, sep = "_", into = c("year", "type", "stream", "id")) %>%
dplyr::filter(type == "plot")
aws.s3::s3read_using(FUN = base::readRDS,
object = paste0("qfqm_flux_shiny/v20210223/STER/2020_plot_rtioMoleDryCo2_dqmp.RDS"),
bucket = swft_ei_bucket
))
aws.s3::s3read_using(FUN = base::readRDS,
object = paste0("qfqm_flux_shiny/v20210223/STER/2020_plot_rtioMoleDryCo2_dqmp.RDS"),
bucket = swft_ei_bucket
)
